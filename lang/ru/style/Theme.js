export default {
  header: 'Тема',
  headerText: 'Без особых усилий можно программно поменять стандартные цвета приложения. Пересоберите дефолтные стили и настройте множество аспектов фреймворка под собственные нужды. Если Вы ищите **Генератор Тем**, то он [здесь](/theme-generator).',
  lightAndDarkHeader: 'Светлая и темная',
  lightAndDarkText1: 'Темы в Vuetify поддерживают **светлые** и **темные** (**light** и **dark**) тона согласно спецификации Material Design. Определить это следует в корневом компоненте приложения`v-app`. Эта функциональность поддерживается большинством компонентов. По умолчанию используется **светлая** тема, но это запросто меняется добавлением свойства **dark**.',
  lightAndDarkText2: 'Когда вы определяете компонент светлым или темным, все его наследники будут подхватывать это свойство до тех пор, пока тон снова не будет явно переопределен. Из-за специфики CSS встречаются случаи, когда нужно будет вручную задавать тему для наследников. Чаще всего это происходит при использовании **темной** темы.',
  customizingHeader: 'Кастомизация',
  customizingText1: 'По умолчанию Vuetify применяет стандартную тему для всех компонентов.',
  customizingText2: 'Это можно запросто изменить. Передайте свойство **theme** в функцию `Vue.use`. Вы можете модифицировать как все сразу, так и лишь некоторые свойства темы. Нетронутые свойства будут отнаследованы от темы по умолчанию.',
  customizingText3: 'Вы также можете использовать предопределенные цвета из Material Design.',
  customizingText4: 'Под капотом Vuetify будет генерировать css-классы на основе этих значений, которые будут доступны в DOM. Эти классы будут следовать той же разметке, что и другие вспомогательные классы, например, `primary` или `secondary--text`.',
  customizingText5: 'Эти значения также будут доступны для экземпляра **$vuetify**-объекта в соответствии со свойством **theme**, что позволяет _динамически_ модифицировать тему. За кулисами Vuetify будет пересобирать и обновлять классы темы, плавно обновляя ваше приложение.',
  optionHeader: 'Опции',
  optionText1: 'Vuetify создает стили темы в рантайме для одностраничных приложений (SPA) и на серверной стороне для SSR-приложений. Сгенерированные стили будут помещены в тэг `<style>` с **id** **\'vuetify-theme-stylesheet\'**.',
  optionText2: 'По умолчанию, **primary**, **secondary** and **accent** будут иметь темные и светлые классы. Это позволит Вам использовать тот же синтаксис, что и при работе с обычными цветами, например: `class="primary darken-1"`. При инициализации объекта используйте следующую настройку:',
  optionHeader2: 'Минификация',
  optionText3: 'При работе с SSR-приложениями Вы можете передавать коллбэк в **$vuetify.options.minifyTheme**, чтобы снизить начальный размер страницы. При использовании этой опции также рекомендуется использовать **themeCache**.',
  optionHeader3: 'Кэширование',
  optionText4: 'Пользовательский объект кэширования (в тандеме с **minifyTheme**) был создан для повышения эффективности рэндеринга на серверной стороне. Объект должен содержать методы **get** и **set**. Ниже приведен пример [LRU кэша](https://www.npmjs.com/package/lru-cache).',
  stylusHeader: 'Изменение переменных Stylus',
  stylusText1: 'Vuetify построен поверх **stylus**. Как и в **scss**, Вы можете менять переменные и пересобирать файлы стилей. Список доступных переменных [здесь](https://github.com/vuetifyjs/vuetify/blob/master/src/stylus/settings/_variables.styl). Для работы с файлами stylus нужно настроить приложение. Если Вы используете один из готовых шаблонов, доступных в руководстве [Быстрый старт](/getting-started/quick-start), то смело пропускайте следующий абзац.',
  stylusHeader2: 'Настройка stylus-loader`а в Webpack',
  stylusText2: 'Запустите в командной строке:',
  stylusText3: 'Любая из этих команд установит необходимые зависимости для импорта и парсинга stylus-файлов. После установки откройте Webpack-конфиг и добавьте новое правило для stylus. В случае работы с **SSR** приложениями убедитесь, что импорт находится в основной `client-entry`.',
  stylusText4: 'Создайте папку `stylus`в src (или в соответствующем каталоге ресурсов) с файлом `main.styl`. Он служит точкой входа для импорта и ребилда дефолтных стилей Vuetify. После создания, откройте .styl-файл и впишите следующее:',
  stylusText5: 'Учитывайте, что относительный путь к node_modules в Вашем проекте может отличаться. Желательно поместить импорт в точку входа (`index.js` или `client-entry.js`). **НЕ ИМПОРТИРУЙТЕ** Ваш `main.styl` внутри компонента! Это _приведет_ к проблемам с производительностью и сильно замедлит **HMR** (Hot Module Reloading — горячая перезагрузка модуля).',
  stylusText6: 'Если раньше Вы подключали стили Vuetify через `<link>` в index-файле, то после импорта этот тег нужно убрать. Перезапустите сборщик и заново откройте проект. Вы должны увидеть, что стили подключились и работают правильно.',
  stylusHeader3: 'Изменение переменных',
  stylusText7: 'Теперь, когда stylus настроен, можно задать дефолтные значения для его переменных, которые Вы бы хотели изменить. Они должны быть объявлены _перед_ импортом и будут автоматически перезаписывать стандартные значения Vuetify.',
  toc: [
    {
      text: 'Тема',
      href: 'introduction'
    },
    {
      text: 'Светлая и Темная',
      href: 'light-and-dark'
    },
    {
      text: 'Кастомизация',
      href: 'customizing'
    },
    {
      text: 'Опции',
      href: 'options'
    },
    {
      text: 'Изменение переменных Stylus',
      href: 'stylus-guide'
    }
  ]
}
